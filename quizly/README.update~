This describes what is needed to upgraded Quizly when App Inventor (AI) is upgraded.  

Quizly integrates to AI through the blockly-all.js file, which is
copied from AI's build/blocklyeditor/blockly-all.js.

The main difference between Quizly and AI is that Quizly uses a
variant of Blockly's Toolbox whereas AI uses its own custom Drawer
instead of Toolbox.  The reason for this is that AI's blocks editor,
which is based on Blockly, must interface with AI's Designer, which 
is written in Java and uses Google's Google Web Toolkit (GWT).

The main challenge in upgrading Quizly has to do with the differences
between the way that he blocks editor is injected into the iframe
in Blockly, Quizly (which is more like Blockly), and AI.  

Quizly is based on Blockly's code app:  
  http://blockly-demo.appspot.com/static/apps/code/en.html

Blockly Injection
-----------------

For Blockly's code app, here is Blockly's init() function in frame.html:

    function init() {
      var rtl = false;
      var toolbox = null;
      if (window.parent.document) {
        // document.dir fails in Mozilla, use document.body.parentNode.dir.
        // https://bugzilla.mozilla.org/show_bug.cgi?id=151407
        rtl = window.parent.document.body.parentNode.dir == 'rtl';
        toolbox = window.parent.document.getElementById('toolbox');
      }
      Blockly.inject(document.body,
          {path: '../../',
           rtl: rtl,
           toolbox: toolbox});

      if (window.parent.init) {
        // Let the top-level application know that Blockly is ready.
        window.parent.init(Blockly);
      } else {
        // Attempt to diagnose the problem.
        var msg = 'Error: Unable to communicate between frames.\n\n';
        if (window.parent == window) {
          msg += 'Try loading index.html instead of frame.html';
        } else if (window.location.protocol == 'file:') {
          msg += 'This may be due to a security restriction preventing\n' +
              'access when using the file:// protocol.\n' +
              'http://code.google.com/p/chromium/issues/detail?id=47416';
        }
        alert(msg);
      }
    }

Note that the toolbox is set from
window.parent.document.getElementById('toolbox').  This means that, in
this version of that app, the toolbox is separate from the iframe that
contains the workspace.  In Blockly, the toolbox is coded as a static
XML structure and injected into the page via a Javascript function in
templates.js:

codepage.toolbox = function(opt_data, opt_ignored, opt_ijData) {
  return '<xml id="toolbox" style="display: none"><category name="' + '<LOTS LEFT OUT>' +  
    '</category></xml>';
};

The key point is that when Blockly.inject is called

  Blockly.inject = function(container, opt_options) {
    // Verify that the container is in document.
    if (!goog.dom.contains(document, container)) {
      throw 'Error: container is not in current document.';
    }
    if (opt_options) {
      // TODO(scr): don't mix this in to global variables.
      goog.mixin(Blockly, Blockly.parseOptions_(opt_options));
    }
    Blockly.createDom_(container);
    Blockly.init_();
  };

the toolbox option has been set to the element in the iframe's enclosing frame. This means
that when Blockly.init_() is called, the Blockly.Toolbox attribute is set and everything
loads nicely:

  Blockly.init_ = function() {

    // Stuff commented out above

    var addScrollbars = true;
    if (Blockly.languageTree) {
      if (Blockly.Toolbox) {
	Blockly.Toolbox.init();
      } else if (Blockly.Flyout) {
	// Build a fixed flyout with the root blocks.
	Blockly.mainWorkspace.flyout_.init(Blockly.mainWorkspace,
	    Blockly.getMainWorkspaceMetrics, true);
	Blockly.mainWorkspace.flyout_.show(Blockly.languageTree.childNodes);
	// Translate the workspace sideways to avoid the fixed flyout.
	Blockly.mainWorkspace.scrollX = Blockly.mainWorkspace.flyout_.width_;
	var translation = 'translate(' + Blockly.mainWorkspace.scrollX + ', 0)';
	Blockly.mainWorkspace.getCanvas().setAttribute('transform', translation);
	Blockly.mainWorkspace.getBubbleCanvas().setAttribute('transform',
							     translation);
	addScrollbars = false;
      }
    }
    
    // Stuff commented out below
  };

App Inventor Injection
----------------------

In App Inventor, there is no Toolbox. Instead there is a Drawer.   In AI
Blockly.inject() is called from Blockly.BlocklyEditor.startup(), which is
called in blocklyframe.html:

      function init() {
        // We expect window.location.hash to have the form:
        // projectId_formName, and to be unique among
        // all the Blockly instances created in this App Inventor session.
        if (Blockly['ReplState'] == undefined)
            Blockly.ReplState = new Blockly.ReplStateObj();
        var formName = window.location.hash.substr(1);
        Blockly.BlocklyEditor.startup(document.body, formName);
        if (!window.parent.Blocklies) {
          // We keep a set of Blockly objects indexed by name
          // of the form for which they are the blocks editor
          window.parent.Blocklies = {};
          window.parent.ReplState = new Blockly.ReplStateObj(); // There should be one of these for the whole system
        }
        window.parent.Blocklies[formName] = Blockly;
        Blockly.ReplMgr.ReplState = window.parent.ReplState;
        Blockly.ReplMgr.formName = formName; <!-- So we can tell the AssetManager which form we are on. -->
        window.parent.BlocklyPanel_initBlocksArea(formName);
      }

In Blockly.BlocklyEditor.js (which is merged into blockly-all.js) here is the 
injection code:

  Blockly.BlocklyEditor.startup = function(documentBody, formName) {
    Blockly.inject(documentBody);
    Blockly.Drawer.createDom();
    Blockly.Drawer.init();
    Blockly.BlocklyEditor.formName_ = formName;
    // Lots of other initialization stuff deleted here
  }

Note that inject() is passed just one argument, which means that its options
parameter is left out:

  Blockly.inject = function(container, opt_options) {
    // Verify that the container is in document.
    if (!goog.dom.contains(document, container)) {
      throw 'Error: container is not in current document.';
    }
    if (opt_options) {
      // TODO(scr): don't mix this in to global variables.
      goog.mixin(Blockly, Blockly.parseOptions_(opt_options));
    }
    Blockly.createDom_(container);
    Blockly.init_();
  };

Thus, when Blockly.init_() is called, Blockly.Toolbox is null:

  Blockly.init_ = function() {

    // Stuff left out above 

    var addScrollbars = true;
    if (Blockly.languageTree) {
      if (Blockly.Toolbox) {
	Blockly.Toolbox.init();
      } else if (Blockly.Flyout) {
	// Build a fixed flyout with the root blocks.
	Blockly.mainWorkspace.flyout_.init(Blockly.mainWorkspace,
	    Blockly.getMainWorkspaceMetrics, true);
	Blockly.mainWorkspace.flyout_.show(Blockly.languageTree.childNodes);
	addScrollbars = false;
      }
    }
    // Stuff left out below

  };

This is a problem for Quizly, which unlike both Blockly's code app and 
AI, has the Toolbox included in the iframe.

Quizly Injection
----------------

The dilemma for Quizly is as follows:

* The Toolbox is a dynamic part of the iframe, so it is not available
in the iframe's parent window, as it is in Blockly.

* The Toolbox is implemented in blockly-toolbox.js -- that is, separately 
from blockly-all.js. That is where the following stuff happens:

  Blockly.Toolbox = {};  // Create the name space for the toolbox
  Blockly.Toolbox.init() // Initialization function

These functions must be available during Blockly.init_().  And it won't
work simply to load blockly-toolbox.js before loading blockly-all.js
because at that point, there is no Blockly object to hang the Toolbox
off of.

If you look at how blockly-all.js is constructed in ploverConfig.js,
you find the following order:

    '../lib/blockly/src/core/blockly.js',
    './src/language/en/_messages.js',

    //the rest of the blockly .js files can come in any order

    '../lib/blockly/src/core/block.js',
    '../lib/blockly/src/core/block_svg.js',
    //...
    '../lib/blockly/src/core/procedures.js',
    '../lib/blockly/src/core/scrollbar.js',
    //'../lib/blockly/src/core/toolbox.js',
    '../lib/blockly/src/core/tooltip.js',
    '../lib/blockly/src/core/trashcan.js',
    // ...

So what if we paste blockly-toolbox.js source code into
blockly-all.js just after scrollbar.js and just before
tooltip.js.




